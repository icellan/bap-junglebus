{"version":3,"file":"bap.js","names":["BAP","Collection","SimpleSchema","block","type","Integer","label","optional","String","hash","sequence","signatureAddress","data","timestamp","processed","Boolean","error","processBAPinserts","doc","modifier","$set","handleAttestationTransaction","handleIDTransaction","handleRevokeTransaction","handleAliasTransaction","handleDataTransaction","update","_id","JSON","stringify","Object","getOwnPropertyNames","after"],"sources":["../../src/schemas/bap.js"],"sourcesContent":["import SimpleSchema from 'simpl-schema';\nimport { Collection } from '../lib/collection';\nimport {\n  handleAttestationTransaction,\n  handleRevokeTransaction,\n  handleDataTransaction,\n} from '../attest';\nimport {\n  handleIDTransaction,\n  handleAliasTransaction,\n} from '../id';\n\nexport const BAP = new Collection('bap', new SimpleSchema({\n  block: {\n    type: SimpleSchema.Integer,\n    label: 'Block number this transaction was mined into - null if still in mempool',\n    optional: true,\n  },\n  type: {\n    type: String,\n    label: 'Type of BAP transaction (ID, ATTEST, DATA, ALIAS, ...)',\n    optional: false,\n  },\n  hash: {\n    type: String,\n    label: 'ID key or attestation hash',\n    optional: false,\n  },\n  sequence: {\n    type: String,\n    label: 'Sequences number of the attestation, or the address of the ID',\n    optional: false,\n  },\n  signatureAddress: {\n    type: String,\n    label: 'Bitcoin address this bap transaction was signed with',\n    optional: false,\n  },\n  data: {\n    type: String,\n    label: 'Optional data that was appended to this BAP transaction',\n    optional: true,\n  },\n  timestamp: {\n    type: SimpleSchema.Integer,\n    label: 'timestamp the transaction was broadcast - if available',\n    optional: true,\n  },\n  processed: {\n    type: Boolean,\n  },\n  error: {\n    type: String,\n  },\n}));\n\n// there will only be valid transactions inserted, so here we can assume that for instance\n// signing has been verified\nconst processBAPinserts = async function (doc, modifier) {\n  if (\n    modifier.$set\n    && modifier.$set.type\n    && modifier.$set.hash\n    && modifier.$set.sequence\n    && modifier.$set.signatureAddress\n  ) {\n    try {\n      const { type } = modifier.$set;\n      if (type === 'ATTEST') {\n        await handleAttestationTransaction(modifier.$set);\n      } else if (type === 'ID') {\n        await handleIDTransaction(modifier.$set);\n      } else if (type === 'REVOKE') {\n        await handleRevokeTransaction(modifier.$set);\n      } else if (type === 'ALIAS') {\n        await handleAliasTransaction(modifier.$set);\n      } else if (type === 'DATA') {\n        await handleDataTransaction(modifier.$set);\n      }\n      await BAP.update({\n        _id: doc._id,\n      }, {\n        $set: {\n          processed: true,\n        },\n      });\n    } catch (e) {\n      await BAP.update({\n        _id: doc._id,\n      }, {\n        $set: {\n          error: JSON.stringify(e, Object.getOwnPropertyNames(e)),\n        },\n      });\n    }\n  }\n};\n\nBAP.after('insert', async (doc) => {\n  await processBAPinserts(doc, { $set: doc });\n});\n\nBAP.after('updateOne', async (doc, modifier) => {\n  await processBAPinserts(doc, modifier);\n});\n"],"mappings":"+eAYaA,GAAG,CAAG,GAAIC,uBAAU,CAAC,KAAK,CAAE,GAAIC,wBAAY,CAAC,CACxDC,KAAK,CAAE,CACLC,IAAI,CAAEF,uBAAY,CAACG,OAAO,CAC1BC,KAAK,CAAE,yEAAyE,CAChFC,QAAQ,GACV,CAAC,CACDH,IAAI,CAAE,CACJA,IAAI,CAAEI,MAAM,CACZF,KAAK,CAAE,wDAAwD,CAC/DC,QAAQ,GACV,CAAC,CACDE,IAAI,CAAE,CACJL,IAAI,CAAEI,MAAM,CACZF,KAAK,CAAE,4BAA4B,CACnCC,QAAQ,GACV,CAAC,CACDG,QAAQ,CAAE,CACRN,IAAI,CAAEI,MAAM,CACZF,KAAK,CAAE,+DAA+D,CACtEC,QAAQ,GACV,CAAC,CACDI,gBAAgB,CAAE,CAChBP,IAAI,CAAEI,MAAM,CACZF,KAAK,CAAE,sDAAsD,CAC7DC,QAAQ,GACV,CAAC,CACDK,IAAI,CAAE,CACJR,IAAI,CAAEI,MAAM,CACZF,KAAK,CAAE,yDAAyD,CAChEC,QAAQ,GACV,CAAC,CACDM,SAAS,CAAE,CACTT,IAAI,CAAEF,uBAAY,CAACG,OAAO,CAC1BC,KAAK,CAAE,wDAAwD,CAC/DC,QAAQ,GACV,CAAC,CACDO,SAAS,CAAE,CACTV,IAAI,CAAEW,OACR,CAAC,CACDC,KAAK,CAAE,CACLZ,IAAI,CAAEI,MACR,CACF,CAAC,CAAC,CAAC,iBAIH,GAAMS,kBAAiB,iFAAG,WAAgBC,CAAG,CAAEC,CAAQ,iGAEnDA,CAAQ,CAACC,IAAI,EACVD,CAAQ,CAACC,IAAI,CAAChB,IAAI,EAClBe,CAAQ,CAACC,IAAI,CAACX,IAAI,EAClBU,CAAQ,CAACC,IAAI,CAACV,QAAQ,EACtBS,CAAQ,CAACC,IAAI,CAACT,gBAAgB,+BAGvBP,CAAI,CAAKe,CAAQ,CAACC,IAAI,CAAtBhB,IAAI,CACC,QAAQ,GAAjBA,CAAiB,iCACb,GAAAiB,oCAA4B,EAACF,CAAQ,CAACC,IAAI,CAAC,kCAC/B,IAAI,GAAbhB,CAAa,mCAChB,GAAAkB,uBAAmB,EAACH,CAAQ,CAACC,IAAI,CAAC,oCACtB,QAAQ,GAAjBhB,CAAiB,mCACpB,GAAAmB,+BAAuB,EAACJ,CAAQ,CAACC,IAAI,CAAC,oCAC1B,OAAO,GAAhBhB,CAAgB,mCACnB,GAAAoB,0BAAsB,EAACL,CAAQ,CAACC,IAAI,CAAC,oCACzB,MAAM,GAAfhB,CAAe,mCAClB,GAAAqB,6BAAqB,EAACN,CAAQ,CAACC,IAAI,CAAC,0BAEtCpB,GAAG,CAAC0B,MAAM,CAAC,CACfC,GAAG,CAAET,CAAG,CAACS,GACX,CAAC,CAAE,CACDP,IAAI,CAAE,CACJN,SAAS,GACX,CACF,CAAC,CAAC,+EAEId,GAAG,CAAC0B,MAAM,CAAC,CACfC,GAAG,CAAET,CAAG,CAACS,GACX,CAAC,CAAE,CACDP,IAAI,CAAE,CACJJ,KAAK,CAAEY,IAAI,CAACC,SAAS,MAAIC,MAAM,CAACC,mBAAmB,MAAG,CACxD,CACF,CAAC,CAAC,uDAGP,wDAED/B,GAAG,CAACgC,KAAK,CAAC,QAAQ,iFAAE,WAAOd,CAAG,sGACtBD,iBAAiB,CAACC,CAAG,CAAE,CAAEE,IAAI,CAAEF,CAAI,CAAC,CAAC,wCAC5C,wDAAC,CAEFlB,GAAG,CAACgC,KAAK,CAAC,WAAW,iFAAE,WAAOd,CAAG,CAAEC,CAAQ,sGACnCF,iBAAiB,CAACC,CAAG,CAAEC,CAAQ,CAAC,wCACvC,wDAAC"}