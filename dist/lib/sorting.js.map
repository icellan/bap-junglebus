{"version":3,"file":"sorting.js","names":["getCommandData","d","out","find","ao","s1","s2","cmd","o0","s3","idKey","s4","newAddress","s5","previousAddress","s8","s9","sortIds","groupedIds","idKeys","Object","keys","sortedIds","forEach","ids","length","push","mappings","i","linksTo","m","sort","a","b","map","sortTransactionsForProcessing","data","rest"],"sources":["../../src/lib/sorting.js"],"sourcesContent":["/**\n * This is a helpers to find the correct index in the txo data, older data did not have an\n * OP_FALSE OP_RETURN, so will have a different index order\n *\n * @param d\n * @returns {{idKey: *, previousAddress: *, cmd: *, newAddress: *}}\n */\nconst getCommandData = function (d) {\n  const out = d.out.find((ao) => {\n    return ao.s1 === '1BAPSuaPnfGnSBM3GLV9yhxUdYe4vGbdMT'\n      || ao.s2 === '1BAPSuaPnfGnSBM3GLV9yhxUdYe4vGbdMT';\n  });\n\n  const cmd = out.o0 === 'OP_RETURN' ? out.s2 : out.s3;\n  const idKey = out.o0 === 'OP_RETURN' ? out.s3 : out.s4;\n  const newAddress = out.o0 === 'OP_RETURN' ? out.s4 : out.s5;\n  const previousAddress = out.o0 === 'OP_RETURN' ? out.s8 : out.s9;\n\n  return {\n    cmd,\n    idKey,\n    newAddress,\n    previousAddress,\n  };\n};\n\n/**\n * We need to make sure the ids are sorted in the correct order, where a new address is always\n * referencing the previous id. If someone updates lots of IDs at the same time (in the same block)\n * the order will not be guaranteed and bad things can happen\n *\n * @param groupedIds\n */\nconst sortIds = function (groupedIds) {\n  const idKeys = Object.keys(groupedIds);\n\n  const sortedIds = [];\n  idKeys.forEach((idKey) => {\n    const ids = groupedIds[idKey];\n    if (ids.length === 1) {\n      // just 1 id for this idKey, just add it to the list\n      sortedIds.push(ids[0]);\n    } else {\n      // create a mapping for newAddress -> previousAddress and the index\n      const mappings = [];\n      for (let i = 0; i < ids.length; i++) {\n        const {\n          newAddress,\n          previousAddress,\n        } = getCommandData(ids[i]);\n        mappings.push({\n          newAddress,\n          previousAddress,\n          i,\n        });\n      }\n\n      // check what links to what, previousAddress <- newAddress\n      for (let i = 0; i < mappings.length; i++) {\n        const linksTo = mappings.find((m) => {\n          return mappings[i].previousAddress === m.newAddress;\n        });\n        mappings[i].linksTo = linksTo ? linksTo.i : -1;\n      }\n\n      // sort the mappings based on the parent linksTo\n      mappings.sort((a, b) => {\n        if (a.linksTo === b.linksTo) {\n          return 0;\n        }\n\n        return a.linksTo > b.linksTo ? 1 : -1;\n      });\n\n      // populate the sortedIds array with the sorted mappings array\n      mappings.forEach((map) => {\n        sortedIds.push(ids[map.i]);\n      });\n    }\n  });\n\n  return sortedIds;\n};\n\n/**\n * We need to sort the BAP transactions before processing\n * ID transactions need to be done first, otherwise we cannot verify the ATTEST transactions\n *\n * @param data\n * @returns {*[]}\n */\nexport const sortTransactionsForProcessing = function (data) {\n  const ids = {};\n  const rest = [];\n  data.forEach((d) => {\n    const {\n      cmd,\n      idKey,\n    } = getCommandData(d);\n\n    if (cmd === 'ID') {\n      if (!ids[idKey]) {\n        ids[idKey] = [];\n      }\n      ids[idKey].push(d);\n    } else {\n      rest.push(d);\n    }\n  });\n\n  const sortedIds = sortIds(ids);\n\n  return [...sortedIds, ...rest];\n};\n"],"mappings":"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"}