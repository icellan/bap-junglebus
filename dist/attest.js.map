{"version":3,"file":"attest.js","names":["handleAttestationTransaction","doc","type","getIdForAddress","signatureAddress","id","wasIdValidForAddressAt","block","validAddress","idKey","_id","attestation","address","txId","sequence","data","Attest","findOne","hash","existing","txAlreadyInAttestation","signers","find","sign","update","$set","signerAlreadyInAttestation","updateOne","$lt","$unset","$addToSet","insert","addBAPErrorTransaction","error","handleRevokeTransaction","handleDataTransaction"],"sources":["../src/attest.js"],"sourcesContent":["import {\n  getIdForAddress,\n  wasIdValidForAddressAt,\n} from './id';\nimport { Attest } from './schemas/attest';\nimport { addBAPErrorTransaction } from './bap';\n\nexport const handleAttestationTransaction = async function (doc) {\n  if (doc.type !== 'ATTEST') return;\n\n  const id = await getIdForAddress(doc.signatureAddress);\n  const validAddress = await wasIdValidForAddressAt(doc.signatureAddress, doc.block, id);\n  if (id && validAddress) {\n    const idKey = id._id;\n    const attestation = {\n      idKey,\n      address: doc.signatureAddress,\n      txId: doc._id,\n      block: doc.block,\n      sequence: Number(doc.sequence),\n    };\n    if (doc.data) attestation.data = doc.data;\n\n    const existing = await Attest.findOne({ _id: doc.hash });\n    if (existing) {\n      // we must first check whether this transaction has already been added to 'signers'\n      const txAlreadyInAttestation = existing.signers?.find((sign) => {\n        return sign.txId === doc.txId;\n      });\n      if (txAlreadyInAttestation) {\n        // we will only update the block here, otherwise something strange is going on\n        await Attest.update({\n          _id: doc.hash,\n          'signers.txId': doc._id,\n        }, {\n          $set: {\n            'signers.$.block': doc.block,\n          },\n        });\n      } else {\n        // here we must check whether the idKey has signed before\n        const signerAlreadyInAttestation = existing.signers?.find((sign) => {\n          return sign.idKey === idKey;\n        });\n        if (signerAlreadyInAttestation) {\n          // this should be a re-attest, since there is already a valid transaction\n          await Attest.updateOne({\n            _id: doc.hash,\n            'signers.idKey': idKey,\n            'signers.sequence': {\n              $lt: Number(doc.sequence),\n            },\n          }, {\n            $set: {\n              'signers.$.sequence': Number(doc.sequence),\n            },\n            $unset: {\n              'signers.$.revokedId': doc._id,\n            },\n          });\n        } else {\n          await Attest.update({\n            _id: doc.hash,\n          }, {\n            $addToSet: {\n              signers: attestation,\n            },\n          });\n        }\n      }\n    } else {\n      await Attest.insert({\n        _id: doc.hash,\n        signers: [attestation],\n      });\n    }\n  } else {\n    await addBAPErrorTransaction({\n      txId: doc._id,\n      doc,\n      error: 'Could not validate attestation',\n      id,\n      validAddress,\n    });\n  }\n};\n\nexport const handleRevokeTransaction = async function (doc) {\n  if (doc.type !== 'REVOKE') return;\n\n  const id = await getIdForAddress(doc.signatureAddress);\n  const validAddress = await wasIdValidForAddressAt(doc.signatureAddress, doc.block, id);\n  if (id && validAddress) {\n    const idKey = id._id;\n    const existing = await Attest.findOne({ _id: doc.hash });\n    if (existing) {\n      // this transaction should already been added to 'signers' - otherwise just ignore\n      await Attest.updateOne({\n        _id: doc.hash,\n        'signers.idKey': idKey,\n        'signers.sequence': {\n          $lt: Number(doc.sequence),\n        },\n      }, {\n        $set: {\n          'signers.$.revokedId': doc._id,\n          'signers.$.sequence': Number(doc.sequence),\n        },\n      });\n    }\n  }\n};\n\nexport const handleDataTransaction = async function (doc) {\n  if (doc.type !== 'DATA') return;\n\n  const id = await getIdForAddress(doc.signatureAddress);\n  const validAddress = await wasIdValidForAddressAt(doc.signatureAddress, doc.block, id);\n  if (id && validAddress) {\n    const idKey = id._id;\n    const existing = await Attest.findOne({ _id: doc.hash });\n    if (existing) {\n      // this transaction should already been added to 'signers' - otherwise just ignore\n      await Attest.updateOne({\n        _id: doc.hash,\n        'signers.idKey': idKey,\n      }, {\n        $set: {\n          'signers.$.data': doc.sequence,\n        },\n      });\n    }\n  }\n};\n"],"mappings":"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"}